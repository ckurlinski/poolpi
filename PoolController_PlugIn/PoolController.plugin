#!/bin/bash
#------------------------------------------------------------------------------#
#                    nodejs-PoolController install and Update                  #
#------------------------------------------------------------------------------#
    ## _pool_controller_install ##
    # Main PoolController installer
      _pool_controller_install() {
        case ${NODEJS_CMD_TEST} in
          1)  _get_repo
              _get_branch
              _nodejs_git_software_install
              Main_Menu
              ;;
          0)  _error "NodeJS is not installed, Aborting....."
              ;;
        esac
      }
    #----------------------------------------------------------------------------#
    ## _pool_controller_install_test ##
    # Test if nodejs-poolController is installed
      _pool_controller_install_test() {
        _checking "Checking is nodejs-poolController is installed..."
        [ -f ${POOL_CONTROLLER_DIR}/sysDefault.json ] && POOL_CONTROLLER_DIR_TEST=1 || POOL_CONTROLLER_DIR_TEST=0
        case ${POOL_CONTROLLER_DIR_TEST} in
          1) _success "nodejs-poolController is Installed";;
          0) _error "nodejs-poolController is Not Installed";;
        esac
      }
    #----------------------------------------------------------------------------#
    ## _pool_controller_update ##
    # Update poolcontroller npm
      _pool_controller_update() {
        if [[ ${POOL_CONTROLLER_DIR_TEST} -eq 1 ]]; then
          case ${NODEJS_CMD_TEST} in
            1)  _select "Updating NPM to run nodejs_PoolController"
                cd ${POOL_CONTROLLER_DIR}
                ${NPM_CMD} i
                ;;
            0)  _error "NodeJS is not installed, Aborting....."
                ;;
          esac
        else
           _error "nodejs-poolController is Not Installled"
        fi
      }
#------------------------------------------------------------------------------#
#                 nodejs-PoolController Start and Stop from Menu               #
#------------------------------------------------------------------------------#
  ## _pool_controller_pid_test ##
  # Test if this install of poolcontroller is running and what PID it is using
    _pool_controller_pid_test() {
      NODE_RUNNING_PIDS="${NODE_SANDBOX}/NODE_RUNNING_PIDS"
      if [[ -f ${NODE_RUNNING_PIDS} ]]; then
        rm ${NODE_RUNNING_PIDS}
        touch ${NODE_RUNNING_PIDS}
      else
        touch ${NODE_RUNNING_PIDS}
      fi
      PID_LIST=($(pgrep node))
      if [[ -z ${PID_LIST[@]} ]]; then
        POOLCONTROLLER_STATUS_TEST=0
      else
        for i in ${PID_LIST[@]}; do
          if [[ $(uname -s) == "Darwin" ]]; then
            lsof -p $i | awk '/cwd/{print$NF}' >> ${NODE_RUNNING_PIDS}
          else
            ls -l /proc/$i/cwd | awk '{print$NF}' >> ${NODE_RUNNING_PIDS}
          fi
        done
        POOLCONTROLLER_STATUS_TEST=($(awk <${NODE_RUNNING_PIDS} -v pid_root="${POOL_CONTROLLER_DIR}" '$0~pid_root{print"1"}'))
        #echo "1 POOLCONTROLLER_STATUS_TEST = ${POOLCONTROLLER_STATUS_TEST}"
        if [[ -z ${POOLCONTROLLER_STATUS_TEST} ]];then POOLCONTROLLER_STATUS_TEST=0; fi
      fi
    }
  #----------------------------------------------------------------------------#
  ## _pool_controller_run ##
  # Run nodejs_PoolController
    _pool_controller_run() {
      case ${POOL_CONTROLLER_DIR_TEST} in
        1)  # Checking for Log Directory
            _pool_controller_log_dir
            case ${POOLCONTROLLER_STATUS_TEST} in
              0)  _pool_controller_log_rotate
                  _warning "Starting nodejs_PoolController....."
                  cd ${POOL_CONTROLLER_DIR}
                  node src/index.js 1>${POOL_CONTROLLER_LOG_FILE} 2>&1 & echo $! > ${POOL_CONTROLLER_PID_FILE}
                  _success "nodejs_PoolController - PID = $(cat ${POOL_CONTROLLER_PID_FILE})"
                  Main_Menu
                  ;;
              1)  _note "nodejs_PoolController is already running, Continuing....."
                  ;;
            esac
            ;;
        0)  _error "nodejs-poolController is Not Installled"
            ;;
        esac
    }
  #----------------------------------------------------------------------------#
  ## _pool_controller_stop ##
  # Stop nodejs_PoolController
    _pool_controller_stop() {
      # Test if nodejs-poolController is installed
      if [[ ${POOL_CONTROLLER_DIR_TEST} -eq 0 ]]; then
        _error "nodejs-poolController is Not Installled"
        _pool_controller_menu
      fi
      # Test if nodejs-poolController is running
      if [[ -f ${POOL_CONTROLLER_PID_FILE} ]]; then
        POOL_CMD_PID=($(cat ${POOL_CONTROLLER_PID_FILE}))
        PID=($(ps -a | grep ${POOL_CMD_PID} | awk '{print$1}'))
        # Executes if nodejs-poolController is running
        _warning "Stopping nodejs_PoolController....."
        kill -SIGINT ${PID}
        [ -z ${PID} ] && PID_TEST=1 || PID_TEST=0
        if [[ ${PID_TEST} -eq 0 ]]; then
           _success "nodejs_PoolController Stopped..."
        fi
        # Rotate Log file
        _pool_controller_log_rotate
        _error "Removing nodejs_PoolController stale PID File"
        rm ${POOL_CONTROLLER_PID_FILE}
      else
        _error "nodejs-poolController is Not Running"
        _pool_controller_menu
      fi
      # Checking for PID file
      _checking "Checking for PID file..."
      [ -z ${POOL_CONTROLLER_PID_FILE} ] && POOLCONTROLLER_PID_TEST=1 || POOLCONTROLLER_PID_TEST=0
      case ${POOLCONTROLLER_PID_TEST} in
        1)  _error "nodejs_PoolController stale PID File not removed"
            _note "Manually Remove File:"
            _print_file "${POOL_CONTROLLER_PID_FILE}"
            ;;
        0)  _success "There is no stale nodejs_PoolController PID File"
            ;;
      esac
    }
#------------------------------------------------------------------------------#
#        PoolController Logs, Log Rotate, Log Directory, and PID File          #
#------------------------------------------------------------------------------#
  ## _pool_controller_log_dir ##
  # Test if Log Directory is Availble and create it if it is not
    _pool_controller_log_dir(){
      [ -d ${POOL_CONTROLLER_LOG_DIR} ] && POOL_CONTROLLER_LOG_DIR_TEST=1 || POOL_CONTROLLER_LOG_DIR_TEST=0
      case ${POOL_CONTROLLER_LOG_DIR_TEST} in
        1)  _success "Log Directory Exists, Continuing...."
            ;;
        0)  _warning "Creating Log Directory....."
            mkdir -p ${POOL_CONTROLLER_LOG_DIR}
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _pool_controller_view_log ##
  # View Tail Log
    _pool_controller_view_log() {
      case ${POOLCONTROLLER_STATUS_TEST} in
        1)  _header "Tailing nodejs_PoolController Log File"
            tail ${POOL_CONTROLLER_LOG_FILE}
            _warning "Hit the Any Key to Continue....."
            read huh
            ;;
        0)  _error_sep
            _error "No Current Log - PoolController is Not Running"
            _error_sep
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _pool_controller_monitor_log ##
  # View Tail Log
    _pool_controller_monitor_log() {
      case ${POOLCONTROLLER_STATUS_TEST} in
        1)  _header "Monitoring nodejs_PoolController Log File"
            cat ${POOL_CONTROLLER_LOG_FILE}
            _note "Hit the Any Key to Continue....."
            read huh
            ;;
        0)  _error_sep
            _error "No Current Log - PoolController is Not Running"
            _error_sep
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _pool_controller_view_log_files ##
  # List all logs but current
    _pool_controller_view_log_files() {
      [ -d ${POOL_CONTROLLER_LOG_DIR} ] && POOL_CONTROLLER_LOG_DIR_TEST=1 || POOL_CONTROLLER_LOG_DIR_TEST=0
      case ${POOL_CONTROLLER_LOG_DIR_TEST} in
        1)  _warning "Looking for log files in:
                ${POOL_CONTROLLER_LOG_DIR}"
            LIST_ARRAY=($(find ${POOL_CONTROLLER_LOG_DIR} -name ${GIT_NODE_NAME}-* ))
            [ -z ${LIST_ARRAY} ] && LIST_ARRAY_TEST=0 || LIST_ARRAY_TEST=1
            case ${LIST_ARRAY_TEST} in
              1)  _list_template
                  cat ${LIST_OUTPUT}
                  LOG_SHORT_NAME=($(ls ${LIST_OUTPUT} | awk -F \/ '{print $NF}'))
                  _success "Viewing Log ${LOG_SHORT_NAME}:"
                  cat ${POOL_CONTROLLER_LOG_DIR}/${LOG_SHORT_NAME}
                  _note "Hit the Any Key to Continue....."
                  read huh
                  ;;
              0)  _error "There are no Rotated Log Files"
                  ;;
            esac
            ;;
        0)  _error_sep
            _error "No Archived Logs: Missing Log Directory....."
            _error_sep
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _pool_controller_log_rotate ##
  # Rotate log files - use ${DATE_FORMAT}
    _pool_controller_log_rotate(){
      [ -f ${POOL_CONTROLLER_LOG_FILE} ] && POOL_CONTROLLER_LOG_FILE_TEST=1 || POOL_CONTROLLER_LOG_FILE_TEST=0
      case ${POOL_CONTROLLER_LOG_FILE_TEST} in
        1)  _warning "Rotating PoolController Log File"
            mv ${POOL_CONTROLLER_LOG_FILE} ${POOL_CONTROLLER_ROTATE_LOG_FILE}
            touch ${POOL_CONTROLLER_LOG_FILE}
            ;;
        0)  _warning "No Log File, Continuing....."
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _pool_controller_status ##
  # Test to see if the service is running
    _pool_controller_status() {
      _checking "Checking: PoolController Status..."
      case ${POOLCONTROLLER_STATUS_TEST} in
        0)  _error "PoolController is Not Running";;
        1)  _success "PoolController is Running"
            _pool_controller_usb_status
            ;;
      esac
    }
#------------------------------------------------------------------------------#
#                        nodejs-poolController config.json                     #
#------------------------------------------------------------------------------#
  ## _pool_controller_port_array ##
  # Sparces existing Node PIDS currently running and finds next port
    _pool_controller_port_array() {
      # Test for OS
      if [[ $(uname -s) == "Darwin" ]]; then
        # Run for MACOS
        POOLCONTROLLER_PORT_ARRAY=
        for i in ${PID_LIST[@]}; do
          POOLCONTROLLER_PORT_ARRAY+=$(lsof -p $i |\
            awk '/cwd/ {print$NF}' |\
            xargs -n 1 bash -c 'cat $0/config.json' |\
            awk -F : '/expressPort/ {gsub(/,$/,"");print$NF;exit}')
        done
      else
        # Run for Linux
        POOLCONTROLLER_PORT_ARRAY=
        for i in ${PID_LIST[@]}; do
          POOLCONTROLLER_PORT_ARRAY+=$(ls -l /proc/$i/cwd |\
            awk '/cwd/ {print$NF}' |\
            xargs -n 1 bash -c 'cat $0/config.json' |\
            awk -F : '/expressPort/ {gsub(/,$/,"");print$NF;exit}')
        done
      fi
    }
  #----------------------------------------------------------------------------#
  ## _pool_controller_port_check ##
  # Sparces existing Node PIDS currently running and selects a usable port
    _pool_controller_port_check(){
      # Create Node PID List
      PID_LIST=($(pgrep node))
      if [[ -z ${PID_LIST[@]} ]]; then
        # If Node PID List Empty, Escapes
        _checking "Checking: Looking for running ports on Localhost"
        _error "No node / expressPort proccesses open..."
      else
        # If Node PID List ! -z, then procceds to create array
          _checking "Checking: running ports on Localhost"
        # Run to create Running Node / expressPort array
          _pool_controller_port_array
          _warning "Running Port list: ${POOLCONTROLLER_PORT_ARRAY[@]}"
          _checking "Checking: Finding Highest running port on Localhost"
        # Search for Highest Number in Running Node / expressPort Port
          HIGH_PORT=0
          for n in ${POOLCONTROLLER_PORT_ARRAY[@]}; do
            if (( $n > $HIGH_PORT )); then HIGH_PORT=$n; fi
          done
          _success "Highest running port: ${HIGH_PORT}"
        # Create Value to increment Node / expressPort
          _checking "Checking: Suggestion for Node / expressPort..."
          NEW_PORT=$((${HIGH_PORT} + 10))
          _success "Suggested port: ${NEW_PORT}"
      fi
    }
  #----------------------------------------------------------------------------#
  ## _pool_controller_config_test ##
  # Checks if config.json is available
  # Edits local nodejs-poolController config.json expressPort
    _pool_controller_config_test() {
      # Test for config.json
      _checking "Checking: nodejs-poolController config.json"
      [ -f "${POOL_CONTROLLER_CONFIG}" ] && CONFIG_JSON_TEST=1 || CONFIG_JSON_TEST=0
      case ${CONFIG_JSON_TEST} in
        1)  _success "Found: nodejs-poolController config.json";;
        0)  _error "Missing: nodejs-poolController config.json";;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _pool_controller_edit_port ##
  # Edit config.json expressPort
    _pool_controller_edit_port() {
      _pool_controller_port_check
      # Aborts if config.json is missing
        if [[ ${CONFIG_JSON_TEST} -eq 0 ]];then
          _error "Missing: nodejs-poolController config.json"
          break 1
        fi
      # Retrieve Existing value for expressPort in config.json
        OLD_PORT="$(awk -F : '/expressPort/ {gsub(/,$/,"");print$NF;exit}' ${POOL_CONTROLLER_CONFIG})"
        _note "Old expressPort = ${OLD_PORT} / New expressPort = ${NEW_PORT}"
        _query "Proceed with expressPort change ( y | Y )?"
        read ANSWER
        _ans_check
        case ${ANSWER} in
          y | Y )   _note "Changing expressPort: ${NEW_PORT}..."
                    awk -v old="${OLD_PORT}" -v new="${NEW_PORT}" \
                      -F : '{gsub(old,new,$0);print$0}' \
                      ${POOL_CONTROLLER_CONFIG} > ${POOL_CONTROLLER_CONFIG}.tmp
                      mv ${POOL_CONTROLLER_CONFIG}.tmp ${POOL_CONTROLLER_CONFIG}
                  ;;
              * )   _error "Cancelling changes..."
                  ;;
        esac
        _checking "Checking: Current expressPort..."
        CURRENT_PORT="$(awk -F : '/expressPort/ {gsub(/,$/,"");print$NF;exit}' ${POOL_CONTROLLER_CONFIG})"
        [ "${CURRENT_PORT}" == "${OLD_PORT}" ] && POOL_CONTROLLER_PORT_TEST=1 \
        || [ "${CURRENT_PORT}" == "${NEW_PORT}" ] && POOL_CONTROLLER_PORT_TEST=2
        case ${POOL_CONTROLLER_PORT_TEST} in
          1) _success "Current expressPort = ${OLD_PORT}";;
          2) _success "Current expressPort = ${NEW_PORT}";;
        esac
    }
#------------------------------------------------------------------------------#
#              Checks of Device Status if PoolController is Running            #
#------------------------------------------------------------------------------#
  ## _pool_controller_usb_status ##
  # Test to see if the RS485 is Detected
    _pool_controller_usb_status() {
      [ -z $(awk < ${POOL_CONTROLLER_LOG_FILE} '/cannot open \/dev/ {print"huh";exit}') ] && DEVICE_STATUS_TEST=0 || DEVICE_STATUS_TEST=1
      case ${DEVICE_STATUS_TEST} in
        1)  _error "RS485 Adapter is not Configured or Responding...."
            _warning "Please Edit config.json to point to correct RS485 Adapter....."
            _warning "Do you want to Stop the PoolController ( y | N )?"
            read ANSWER
            _ans_check
            case ${ANSWER} in
              y|Y)  _pool_controller_stop ;;
              *)    _error "PoolController is still running, Continuing....." ;;
            esac
            ;;
        0)  _success "PoolController RS485 is up and running, Continuing....."
            _pool_controller_connection_status
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _pool_controller_connection_status ##
  # Test to see if the RS485 is working
    _pool_controller_connection_status() {
      [ -z $(awk < ${POOL_CONTROLLER_LOG_FILE} '/Serial port recovering from lost connection/ {print"huh";exit}') ] && DEVICE_STATUS_TEST=0 || DEVICE_STATUS_TEST=1
      case ${DEVICE_STATUS_TEST} in
        1)  _error "RS485 Adapter is not getting Device Response...."
            _warning "Please check connections to RS485 Network....."
            _note "Verify:"
            _note "(+) Positive"
            _note "(-) Negitive"
            _note "Data Wires"
            _warning "Do you want to Stop the PoolController ( y | N )?"
            read ANSWER
            _ans_check
            case ${ANSWER} in
              y|Y)  _pool_controller_stop ;;
              *)    _error "PoolController is still running, Continuing....." ;;
            esac
            ;;
        0)  _success "PoolController is getting RS485 Data, Continuing....."
            ;;
      esac
    }
#------------------------------------------------------------------------------#
#            Build Start and Stop Standalone Files for PoolController          #
#------------------------------------------------------------------------------#
  ## _poolcontroller_service_file_builder ##
  # Builds Service start and stop files for service use
    _poolcontroller_service_file_builder() {
      if [[ ${POOL_CONTROLLER_DIR_TEST} -eq 0 ]]; then
        _error "nodejs-poolController is Not Installled"
        break 1
      fi
      _query "Enter Name for nodejs-poolController Service files"
      _note "Just hit enter for Default: ${GIT_NODE_NAME}"
      read ANSWER
      if [[ -z ${ANSWER} ]]; then
        _warning "Using Default: ${GIT_NODE_NAME}"
        ANSWER="${GIT_NODE_NAME}"
      fi
      ANSWER=($(echo ${ANSWER} | awk '{print toupper($0)}'))
      SERVICE_FILE=${ANSWER}
      START_FILE="${SOURCE}/${ANSWER}_START"
      STOP_FILE="${SOURCE}/${ANSWER}_STOP"
      RESTART_FILE="${SOURCE}/${ANSWER}_RESTART"
      # Create BASE_FILE for start
      BASE_FILE="${SOURCE}/${ANSWER}_BASE"
      _poolcontroller_base_file_builder
      mv ${BASE_FILE} ${START_FILE}
      # Create BASE_FILE for start
      _poolcontroller_base_file_builder
      mv ${BASE_FILE} ${STOP_FILE}
      # Adding Start Parameters to Start File
      _warning "Creating nodejs-poolController Start file..."
      _poolcontroller_start_file_builder
      if [[ -f ${START_FILE} ]]; then
        _success "nodejs-poolController Start file Created"
        _warning "Making nodejs-poolController Start file Executable..."
        chmod +x ${START_FILE}
        _success "${START_FILE}"
      else
        _error "Creating nodejs-poolController Start file Failed..."
      fi
      # Adding Stop Parameters to Stop File
      _warning "Creating nodejs-poolController Stop file..."
      _poolcontroller_stop_file_builder
      if [[ -f ${STOP_FILE} ]]; then
        _success "nodejs-poolController Stop file Created"
        _warning "Making nodejs-poolController Stop file Executable..."
        chmod +x ${STOP_FILE}
        _success "${STOP_FILE}"
      else
        _error "Creating nodejs-poolController Stop file Failed..."
      fi
      # Creating Restart File
      _warning "Creating nodejs-poolController restart file..."
      _poolcontroller_restart_file_builder
      if [[ -f ${RESTART_FILE} ]]; then
        _success "nodejs-poolController Stop file Created"
        _warning "Making nodejs-poolController Stop file Executable..."
        chmod +x ${RESTART_FILE}
        _success "${RESTART_FILE}"
      else
        _error "Creating nodejs-poolController Stop file Failed..."
      fi
    }
  #----------------------------------------------------------------------------#
  ## _poolcontroller_base_file_builder ##
  # Base of both start and stop files
    _poolcontroller_base_file_builder() {
      echo "#!/bin/bash
      # Test for incl.sh
      [ -f incl.sh ] && SOURCE_INCLUDE_TEST=1 || SOURCE_INCLUDE_TEST=0
      case \${SOURCE_INCLUDE_TEST} in
        1)  printf \"\033[96m 1) \033[93;7m${SOURCE}/incl.sh:\033[93;27m Found \033[00m\n\"
            source ${SOURCE}/incl.sh
            ;;
        0)  printf \"\033[96m 1) \033[91;7m${SOURCE}/incl.sh:\033[91;27m Not Found \033[00m\n\"
            printf \"\033[93;7m Rerun Setup Program to create New incl.sh \033[00m\n\"
            exit
            ;;
      esac
      # Test if nodejs-PoolController Installed
      [ -f ${POOL_CONTROLLER_DIR}/sysDefault.json ] && POOL_CONTROLLER_DIR_TEST=1 || POOL_CONTROLLER_DIR_TEST=0
      case \${POOL_CONTROLLER_DIR_TEST} in
        1)  printf \"\033[96m 2) \033[92;7mnodejs-poolController:\033[93;27m Installed \033[00m\n\"
            ;;
        0)  printf \"\033[96m 2) \033[91;7mnodejs-poolController:\033[91;27m Not Installed \033[00m\n\"
            exit
            ;;
      esac
      # Test to rotate nodejs-PoolController log file
      [ -f \${POOL_CONTROLLER_LOG_FILE} ] && POOL_CONTROLLER_LOG_FILE_TEST=1 || POOL_CONTROLLER_LOG_FILE_TEST=0
      case \${POOL_CONTROLLER_LOG_FILE_TEST} in
        1)  printf \"\033[96m 3) \033[92;7mRotating Log File\033[00m\n\"
            mv ${POOL_CONTROLLER_LOG_FILE} ${POOL_CONTROLLER_ROTATE_LOG_FILE}
            touch ${POOL_CONTROLLER_LOG_FILE}
            ;;
        0)  printf \"\033[96m 3) \033[92;7mNo Log File:\033[93;27m Continuing.....\033[00m\n\"
            ;;
      esac" > ${BASE_FILE}
    }
  #----------------------------------------------------------------------------#
  ## _poolcontroller_start_file_builder ##
  # Pulls in all the variables and initializes the run enviorment
  #   to execute nodejs-PoolController from terminal or service
    _poolcontroller_start_file_builder(){
    echo "
      printf \"\033[96m 4) \033[92;7mChange to Directory:\033[93;27m nodejs-PoolController \033[00m\n\"
        cd ${POOL_CONTROLLER_DIR}
      node src/index.js 1> ${POOL_CONTROLLER_LOG_FILE} 2>&1 & echo \$! > ${POOL_CONTROLLER_PID_FILE}
      POOL_CMD_PID=(\$(cat ${POOL_CONTROLLER_PID_FILE}))
      [ -z \${POOL_CMD_PID} ] && POOL_CMD_PID_TEST=0 || POOL_CMD_PID_TEST=1
      case \${POOL_CMD_PID_TEST} in
        1)  printf \"\033[96m 5) \033[92;7m nodejs-PoolController Started:\033[93;27m PID - \${POOL_CMD_PID} \033[00m\n\"
            if [ \$(uname -s) == \"Darwin\" ]; then
              lsof -p \${POOL_CMD_PID} | awk '/cwd/{printf \"\033[92;7m Command Root:\033[27m \"\$NF\"\033[00m\n\";exit}'
              lsof -p \${POOL_CMD_PID} | awk '/txt/{printf \"\033[93;7m Command EXE :\033[27m \"\$NF\"\033[00m\n\";exit}'
            else
              ls -l /proc/\${POOL_CMD_PID}/cwd | awk '{printf \"\033[92;7m Command Root:\033[27m \"\$NF\"\033[00m\n\"}'
              ls -l /proc/\${POOL_CMD_PID}/exe | awk '{printf \"\033[93;7m Command EXE :\033[27m \"\$NF\"\033[00m\n\"}'
            fi
            ;;
        0)  printf \"\033[91;7m nodejs-PoolController:\033[91;27m not running, \033[91;5m Aborting....\033[00m\n\"
            exit
            ;;
      esac"  >> ${START_FILE}
    }
  #----------------------------------------------------------------------------#
  ## _poolcontroller_stop_file_builder ##
  # Pulls in all the variables and initializes the run enviorment
  #   to stop nodejs-PoolController from terminal or service
    _poolcontroller_stop_file_builder(){
      echo "
      printf \"\033[96m 4) \033[92;7mnodejs-PoolController:\033[93;27m stopping \033[00m\n\"
      POOL_CMD_PID=(\$(cat ${POOL_CONTROLLER_PID_FILE}))
      [ -z \${POOL_CMD_PID} ] && POOL_CMD_PID_TEST=0 || POOL_CMD_PID_TEST=1
      case \${POOL_CMD_PID_TEST} in
        1)  printf \"\033[96m 5) \033[91;7mStopped:\033[93;27m PID - \${POOL_CMD_PID}\033[00m\n\"
            kill -SIGINT \${POOL_CMD_PID}
            ;;
        0)  printf \"\033[96m 5) \033[91;7mnodejs-PoolController \033[91;27mis not running, Aborting....\033[00m\n\"
            exit
            ;;
      esac"  >> ${STOP_FILE}
    }
  #----------------------------------------------------------------------------#
  ## _poolcontroller_restart_file_builder ##
  # Creates Script to stop and start daemon
    _poolcontroller_restart_file_builder() {
      echo "
      #!/bin/bash
      printf \"\033[93;7mSTOPPING:\033[93;27m ${SERVICE_FILE} \033[00m\n\"
      ${STOP_FILE}
      read -p \"Pausing for 3 seconds\" -t 3
      printf \"\033[00m\n\"
      printf \"\033[93;7mSTARTING:\033[93;27m ${SERVICE_FILE} \033[00m\n\"
      ${START_FILE}
    " > ${RESTART_FILE}
    }
#------------------------------------------------------------------------------#