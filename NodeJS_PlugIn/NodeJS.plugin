#!/bin/bash
#------------------------------------------------------------------------------#
#                   NodeJS Directory, Install, and PATH Tests                  #
#------------------------------------------------------------------------------#
  ## _nodejs_install_dir ##
  # Test if NodeJS install Directory is availble
    _nodejs_install_dir() {
      _checking "Checking: for NodeJS install Directory..."
      [ -d ${NODE_BASE} ] && NODE_BASE_TEST=1 || NODE_BASE_TEST=0
      case ${NODE_BASE_TEST} in
        1)  _error "NodeJS Directory Exists, Cancelling Installation...."
            break 1
            ;;
        0)  _success "NodeJS Directory is missing, Continuing Installation..."
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_install_check ##
  # Check if NodsJS is currently installed
    _nodejs_install_check() {
      _checking "Checking: if NodeJS is currently installed..."
      [ -f ${NODE_CMD} ] && NODEJS_INSTALLED=1 || NODEJS_INSTALLED=0
      case ${NODEJS_INSTALLED} in
        1)  _error "The node command is installed, Cancelling Installation...."
            break 1
            ;;
        0)  _success "The node command is not available, Continuing Installation..."
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_node_cmd_check ##
  # Checks if the ${NODE_CMD} expands to a valid path
    _nodejs_node_cmd_check() {
      _checking "Checking: NodeJS Installation..."
      [ -f ${NODE_CMD} ] && NODEJS_CMD_TEST=1 || NODEJS_CMD_TEST=0
      case ${NODEJS_CMD_TEST} in
        1)  _success "Current install NodeJS Version: $(${NODE_CMD} -v)"
            ;;
        0)  _error "NodeJS is not currently installed"
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_node_cmd_incl_check ##
  # Test if the incl.sh file contains a ${NODE_CMD} PATH
    _nodejs_node_cmd_incl_check() {
      _checking "Checking: current incl.sh for node command path..."
      NODE_CMD_PATH=($(grep -F ${NODE_PATH} ${SOURCE}/incl.sh))
      [[ -z ${NODE_CMD_PATH} ]] && NODE_CMD_PATH_TEST=1 || NODE_CMD_PATH_TEST=0
      case ${NODE_CMD_PATH_TEST} in
        1)  if [[ ${NODEJS_CMD_TEST} == 0 ]]; then
              _error "Nothing to do, NodeJS is not Installed"
            else
              echo "export PATH=\"${NODE_PATH}:\$PATH\"" >> ${SOURCE}/incl.sh
              cd ${SOURCE}
              _success "Updating node bin PATH...."
            fi
            ;;
        0)  _error "Node Path is Already Exported "
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_npm_path_check ##
  # Checks if the ${NPM_CMD} expands to a valid path
    _nodejs_npm_path_check() {
      _checking "Checking: for npm command..."
      [ -f ${NPM_CMD} ] && NPM_CMD_TEST=1 || NPM_CMD_TEST=0
      case ${NPM_CMD_TEST} in
        1)  _success "Found NPM Command: ${NPM_CMD}"
            ;;
        0)  _error "NodeJS is not currently installed"
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_npm_path_incl_check ##
  # Test if the incl.sh file contains a ${NPM_CMD} PATH
    _nodejs_npm_path_incl_check() {
      _checking "Checking: current incl.sh for npm command path..."
      NPM_CMD_PATH=($(grep -F ${NPM_CMD} ${SOURCE}/incl.sh))
      [ -z ${NPM_CMD_PATH} ] && NPM_CMD_PATH_TEST=1 || NPM_CMD_PATH_TEST=0
      case ${NPM_CMD_PATH_TEST} in
        1)  if [[ ${NPM_CMD_TEST} == 0 ]]; then
              _error "Nothing to do, NodeJS is not Installed"
            else
              echo "export PATH=\"${NPM_CMD}:\$PATH\"" >> ${SOURCE}/incl.sh
              cd ${SOURCE}
              source incl.sh
              _success "Updating npm PATH...."
              _checking "Checking: current npm version..."
              _success "Current install NPM Version: $(${NPM_CMD} -v)"
            fi
            ;;
        0)  _error "NPM Path is Already Exported"
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_installation_check ##
  # Test to see if NodeJS is currently installed and add it to incl.sh
    _nodejs_installation_check() {
        _nodejs_node_cmd_check
        _nodejs_node_cmd_incl_check
        _nodejs_npm_path_check
        _nodejs_npm_path_incl_check
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_update_install ##
  # Update the NodeJS Installation
    _nodejs_update_install() {
      case ${NODEJS_CMD_TEST} in
        1)  _header "Updating NPM"
            npm -v
            npm install -g npm
            ;;
        0)  _error "NodeJS is not currently installed"
            ;;
      esac
    }
#------------------------------------------------------------------------------#
#                            NodeJS and NPM Commands                           #
#------------------------------------------------------------------------------#
  ## _node_npm_command_run ##
  # Input npm commands to run in the current enviorment
    _node_npm_command_run() {
      if [[ ${NPM_CMD_TEST} -eq 0 ]]; then
        _error "NodeJS is not currently installed"
        break 1
      fi
      _checking "Input Nodejs or NPM Command to run"
      read ANSWER
      _ans_check
      ${ANSWER}
      _note "Hit the ANY Key to Continue..."
      read huh
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_view_config ##
  # Review current NPM Config
    _nodejs_view_config() {
      case ${NODEJS_CMD_TEST} in
        1)  _warning "npm current config"
            ${NPM_CMD} config ls -l
            _warning "Hit the Any Key to Continue....."
            read huh
            ;;
        0)  _error "NodeJS is not currently installed"
            ;;
      esac
    }
#------------------------------------------------------------------------------#
#                           NodeJS Install Functions                           #
#------------------------------------------------------------------------------#
  ## _nodejs_install_cmd ##
  # Set the install command, wether sudo is used base on OS Type
    _nodejs_install_cmd() {
      _system_os_arch_detect
      [ ${SYS_OS} == Darwin ] && NODEJS_INSTALL_TYPE=1 || NODEJS_INSTALL_TYPE=0
      case ${NODEJS_INSTALL_TYPE} in
        1)  NODEJS_DOWNLOAD_CMD="wget -q"
            NODEJS_EXTRACT_CMD="tar xJf"
            NODEJS_RM_TEMP="rm"
            ;;
        0)  NODEJS_DOWNLOAD_CMD="wget -q"
            NODEJS_EXTRACT_CMD="tar xJf"
            NODEJS_RM_TEMP="rm"
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_list ##
  # Create list of available NodeJS Versions
    _nodejs_list() {
      [ -f NodeJS_PlugIn/NodeJS_List ] && NODEJS_VER_LIST=1 || NODEJS_VER_LIST=0
      case ${NODEJS_VER_LIST} in
        1)  _header "NodeJS_PlugIn/NodeJS_List File availible...."
            ;;
        0)  _header "Updating NodeJS Version List"
            curl -s https://nodejs.org/dist/ \
              | awk 'BEGIN{FS="\"";OFS="\t"}{print$2}' \
              | grep latest-v \
              | tr -d "/" > NodeJS_PlugIn/NodeJS_List
            ;;
        esac
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_version ##
  # Choose NodeJS version
    _nodejs_version() {
      _note "Choose NodeJS Version"
      LIST_ARRAY=($(cat NodeJS_PlugIn/NodeJS_List))
      _list_template
      NODEJS_VER=${LIST_OUTPUT}
      _success "NodeJS Version is: ${NODEJS_VER}"
      rm ${SOURCE}/NodeJS_PlugIn/NodeJS_List
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_download_list ##
  # List NodeJS Downloads
    _nodejs_download_list() {
      _select "Choose NodeJS to download"
      LIST_ARRAY=($(curl -s ${NODEJS_WEB}${NODEJS_VER}/ \
        | awk 'BEGIN{FS="\"";OFS="\t"}{print$2}' \
        | grep -i ${SYS_OS} \
        | grep ${SYS_ARCH} \
        | grep tar.xz))
      _list_template
      NODE_SEL=${LIST_OUTPUT}
      _success ${NODE_SEL}
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_download_extract ##
  # Download and extract selected nodejs version to specified directory
    _nodejs_download_extract() {
      # Download NodeJS and extract
        if [[ -d ${NODE_BASE_TEST} ]]; then
          _success "Directory Available - Installing NodeJS"
        else
          _error "${NODE_BASE} is missing"
          _warning "Creating Directory: ${NODE_BASE}"
          mkdir -p ${NODE_BASE}
        fi
        _header "Downloading ${NODE_SEL}"
        cd ${NODE_BASE}
        ${NODEJS_DOWNLOAD_CMD} ${NODEJS_WEB}${NODEJS_VER}/${NODE_SEL}
        [ -f ${NODE_BASE}/${NODE_SEL} ] && NODEJS_DOWNLOAD_TEST=1 || NODEJS_DOWNLOAD_TEST=0
        case ${NODEJS_DOWNLOAD_TEST} in
          1) _success "$(ls ${NODE_BASE}/${NODE_SEL})"
              ;;
          0)  _error "${NODE_BASE}/${NODE_SEL} is not downloaded. Aborting...."
              break 1
              ;;
        esac
      # Extracting NodeJS to system dir
        _header "Extracting ${NODE_SEL} to ${NODE_BASE}"
        ${NODEJS_EXTRACT_CMD} ${NODE_SEL} --strip=1
        _success "${NODE_SEL} Extracted"
      # remove tmp files / folders
        _header "Removing tar.xz : ${NODE_BASE}/${NODE_SEL}"
        ${NODEJS_RM_TEMP} ${NODE_BASE}/${NODE_SEL}
        _removed "Removed - ${NODE_BASE}/${NODE_SEL}"
      #  Returning to Main Menu
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_create_global_config ##
  # Creates NodeJS Global NPMRC file
    _nodejs_create_global_config() {
      NODE_GLOBAL_DEFAULTS_LIST=(
      "globalconfig=${NODE_GLOBAL_NPMRC}"
      "userconfig=${NPM_USER_CONFIG}"
      "cache=${NODE_GLOBAL_CACHE}"
      "prefix=${NODE_BASE}"
      "init-module=${NPM_USER_INIT}"
      )
      for i in ${NODE_GLOBAL_DEFAULTS_LIST[@]}; do
        echo $i >> ${NODE_GLOBAL_NPMRC}
      done
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_create_install_folders ##
  # Creates Directory Structure for NodeJS Install
    _nodejs_create_install_folders() {
      NODE_DIR_LIST=(
        "${NODE_BASE}"
        "${NODE_PATH}"
        "${NODE_GLOBAL_ETC}"
        "${NPM_USER_CONFIG_PATH}"
        "${NPM_USER_MODULE_DIR}"
      )
      for i in ${NODE_DIR_LIST[@]}; do
        mkdir -p $i
      done
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_install ##
  # Install NodeJS
    _nodejs_install() {
      # Tests if NodeJS is Currently Installed and aborts if it is
        _nodejs_install_dir
      # Creates NodeJS Directories
        _nodejs_create_install_folders
      # Creates NodeJS Global NPMRC file
        _nodejs_create_global_config
      # Select is SUDO is required for installation of NodeJS
        _nodejs_install_cmd
      # Create list of available NodeJS Versions
        _nodejs_list
      # Sparces out OS compatible Version
        _nodejs_version
      # List NodeJS OS compatible Downloads
        _nodejs_download_list
      # Downloads and Extracts Selected NodeJS to Specified Directory
        _nodejs_download_extract
      Main_Menu
    }
#------------------------------------------------------------------------------#
#                           NodeJS Removal Functions                           #
#------------------------------------------------------------------------------#
  ## _nodejs_remove ##
  # Asking for reinstall of NodeJS
    _nodejs_remove() {
      if [[ ! -d ${NODE_BASE} ]]; then
        _error "NodeJS is not currently installed"
        break 1
      fi
      _warning "Remove the complete NodeJS Installation? ( y | N )"
      read ANS
      case ${ANS} in
        y|Y)  _warning "Removing ${NODE_SANDBOX}..."
              # Removing Node Install Directory
                rm -rf ${NODE_SANDBOX}
              # Removing Node and NPM Export Paths in ${SOURCE}/incl.sh
                awk < ${SOURCE}/incl.sh '/source/ {print$0}' >> ${SOURCE}/incl.sh
                mv ${SOURCE}/incl.sh ${SOURCE}/incl.sh
                source ${SOURCE}/incl.sh
              # Test whether Node Install Directory was Removed
                _checking "Checking: ${NODE_SANDBOX}..."
                [ -d ${NODE_SANDBOX} ] && NODEJS_INSTALLED=1 || NODEJS_INSTALLED=0
                case ${NODEJS_INSTALLED} in
                  1)  _error "Unable to Remove ${NODE_SANDBOX}, Aborting...."
                      break 1
                      ;;
                  0)  _success "${NODE_SANDBOX} removed"
                      _note "Returning to Main Menu"
                      Main_Menu
                      ;;
                esac
              ;;
        *)  _note "Leaving ${NODE_SANDBOX} alone, continuing....."
            break 1
            ;;
      esac
    }
#------------------------------------------------------------------------------#
#                     NodeJS Install Node Software from git                    #
#------------------------------------------------------------------------------#
  ## _get_repo ##
  # Clone Git repo
    _get_repo() {
      cd ${NPM_USER_MODULE_DIR}
      _success "$(pwd)"
      if [[ -z $(find . -type d -name ${GIT_NAME}) ]]; then
        _header "Cloning ${GIT_NAME} into $(pwd)"
        git clone ${GIT_REPO}
        cd ${GIT_NAME}
        cat LICENSE
        _note "Hit the Any Key to continue....."
        read huh
      else
        cd ${GIT_NAME}
        cat LICENSE
        _note "Hit the Any Key to continue....."
        read huh
      fi
    }
  #----------------------------------------------------------------------------#
  ## _get_branch ##
  # Git checkout branch
    _get_branch() {
      _header "Entering global node install directory:"
      cd ${NPM_USER_MODULE_DIR}/${GIT_NAME}
      _success "$(pwd)"
      _header "Checking: out - ${GIT_NAME}:${GIT_BRANCH}"
      git checkout ${GIT_BRANCH}
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_git_software_install ##
  # Install software
    _nodejs_git_software_install() {
      _header "Installing ${GIT_NAME}"
        cd ${NPM_USER_MODULE_DIR}/${GIT_NAME}
        _success "$(pwd)"
        ${NPM_GLOBAL_INSTALL} --silent > /dev/null
      _success "${GIT_NAME} installed"
    }
#------------------------------------------------------------------------------#
#                              NPM SystemD Shit                                #
#------------------------------------------------------------------------------#
  ## _npm_create_executable ##
  # Creating npm global executable
    _npm_create_executable() {
      if [[ -f "${CMD_PATH}" ]]; then
        _success "${CMD_PATH} is already Created"
      else
        _header "Creating executable ${CMD_PATH}"
        echo ${npm_start_cmd} > ${CMD_PATH}
        _success "${CMD_PATH} Created"
      fi
      ## Make file executable
        _header "Making ${CMD_PATH} executable"
        chmod +x ${CMD_PATH}
        _success "${CMD_PATH} made executable"
    }
  #----------------------------------------------------------------------------#
  ## _npm_create_sysd_exec ##
  # Creating systemd executable
    _npm_create_sysd_exec() {
        _header "Creating symbolic link"
        _note "${CMD_PATH} to ${SYSTEMD_CMD_PATH}"
        sudo update-alternatives --install "${SYSTEMD_CMD_PATH}" "${SYSTEMD_NAME}" "${CMD_PATH}/${SYSTEMD_NAME}" 1
        _success "${SYSTEMD_NAME}"
    }
#------------------------------------------------------------------------------#
#                  NodeJS Node Software from NodeJS Repo                       #
#         Installs, updates, and manages software listed in local              #
#               ${SOURCES}/NodeJS_Plugin/npm_package_list file                 #
#------------------------------------------------------------------------------#
  ## _node_select_package ##
  # Select npm package to install
    _node_select_package() {
      LIST_ARRAY=(
        $(cat ${NPM_PACKAGE_FILE})
      )
      _list_template
      NPM_PACKAGE=${LIST_OUTPUT}
    }
  #----------------------------------------------------------------------------#
  ## _npm_installer ##
  # npm packege installler
    _npm_installer() {
      _note "If you want to add a npm package, create subfolder, shell scripts, and configs for the package The items will be automatically added when homepi starts"
      _select "Select from npm packages with configs on system"
      _node_select_package
      _npm_install
    }
  #----------------------------------------------------------------------------#
  ## _npm_setup ##
  # Install a npm
    _npm_setup() {
      ## Install nodes
        for i in "${NPM_PACKAGE}"; do
          ${NPM_GLOBAL_INSTALL} $i
          _success $i
        done
    }
  #----------------------------------------------------------------------------#
  ## _npm_install ##
  # npm install
    _npm_install() {
      _select "Install ${NPM_PACKAGE}: (y|n)"
        read ANSWER
      case ${ANSWER} in
        y) _header "Installing ${NPM_PACKAGE}"
            ${NPM_GLOBAL_INSTALL} ${NPM_PACKAGE}
            if [[ ${npm_test} == 1 ]]; then
              _success "${NPM_PACKAGE} = Installed"
            fi
            npm_installed=1
            ;;
        *) _warning "${NPM_PACKAGE} was not installed, Aborted"
            npm_installed=0
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _npm_install_test ##
  # npm installed check
    _npm_install_test() {
      _note "Checking: - ${NPM_PACKAGE}"
      npm -g list ${NPM_PACKAGE} > /dev/null \
        && npm_installed=1 \
        || npm_installed=0
    }
  #----------------------------------------------------------------------------#
  ## _npm_check_package ##
  # Check to see if npm package is installed
  # var ${NPM_PACKAGE} is supplied
    _npm_check_package() {
      _npm_install_test
      if [[ ${npm_installed} == 0 ]]; then
        _error "${NPM_PACKAGE} is not installed"
      fi
    }
  #----------------------------------------------------------------------------#
  ## _npm_package_info ##
  # list npm package tree
    _npm_package_info() {
      _select "Select npm package to view"
        _node_select_package
      _note "npm package: ${NPM_PACKAGE}"
        _npm_check_package
        if [[ ${npm_installed} == 1 ]]; then
          _header "npm show information for package: ${NPM_PACKAGE}"
            npm -g ll ${NPM_PACKAGE}
          _select "Press the Any Key to continue...."
          read huh
        else
          _error "No npm install tree: ${NPM_PACKAGE} not installed"
        fi
    }
  #----------------------------------------------------------------------------#
  ## _npm_package_list_gen ##
  # Generate npm package installation list
  # Pulls the var ${npm_package_name} from config files
    _npm_package_list_gen() {
      find . -type f -name "*.conf" \
      ! -path "./.git/*" \
      | sed 's/\.\///g' \
      | xargs grep npm_package_name \
      | awk '{print$2}' \
      | awk 'BEGIN{FS="=";OFS="\t"}{print$2}' \
      | tr -d "\"" > NodeJS/NODEJS_PACKAGE_LIST
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_cmd_config_setup ##
  # First stage config setup after install
    _nodejs_cmd_config_setup() {
      # Change to
      cd ${SOURCE}/NodeJS_PlugIn/usr/local/lib
    }
#------------------------------------------------------------------------------#
#               NPM Global and Local Config Tests and Updates                  #
#------------------------------------------------------------------------------#
  ## _nodejs_check_local_cache ##
  # Check npm if local user config is set
    _nodejs_check_local_cache() {
      if [[ ${NODEJS_CMD_TEST} == 0 ]];then
        _checking "Checking: Node Local Cache..."
        _error "NodeJS is not Installed, Aborting...."
      fi
      _checking "Checking: Node Local Cache..."
      case ${NODEJS_CMD_TEST} in
        1)  NODE_LOCAL_CACHE=($(npm config get cache))
            [ "${NODE_LOCAL_CACHE}" == "${NODE_GLOBAL_CACHE}" ] && NODE_CACHE_CHECK=1 || NODE_CACHE_CHECK=0
            case ${NODE_CACHE_CHECK} in
              1)  _success "Node Global Cache is Set"
                  ;;
              0)  _error "Node Global cache is not set..."
                  ;;
            esac
            ;;
        0)  _error "NodeJS is not currently installed"
            ;;
      esac
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_check_global_cache ##
  # Check if the global cache has been set
    _nodejs_check_global_cache() {
      if [[ ${NODEJS_CMD_TEST} == 0 ]];then
        _checking "Checking: Node Global Cache..."
        _error "NodeJS is not Installed, Aborting...."
      else
        _checking "Checking: Node Global Cache..."
        NPM_GET_GLOBAL_CACHE=($(npm config --global get cache))
        [ "${NPM_GET_GLOBAL_CACHE}" == "${NODE_GLOBAL_CACHE}" ] && NPM_GET_GLOBAL_CACHE_TEST=1 || NPM_GET_GLOBAL_CACHE_TEST=0
        case ${NPM_GET_GLOBAL_CACHE_TEST} in
          1)  _success "npm global cache is set"
              ;;
          0)  _error "npm global cache is not set, setting global cache"
              ;;
        esac
      fi
    }
  #----------------------------------------------------------------------------#
  ## _nodejs_cache_check ##
  # Function list to check NodeJS Cache Settings
    _nodejs_cache_check() {
      # HUH
      _nodejs_check_global_cache
      _nodejs_check_local_cache
    }
#------------------------------------------------------------------------------#
